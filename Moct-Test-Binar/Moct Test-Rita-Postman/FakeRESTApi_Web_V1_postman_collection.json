{
	"info": {
		"_postman_id": "b7263c97-3757-40e1-a61c-31c5bd3c28e0",
		"name": "FakeRESTApi.Web V1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31929656"
	},
	"item": [
		{
			"name": "Author",
			"item": [
				{
					"name": "/api/v1/Authors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"const schema =\r",
									"{\r",
									"  \"fakerestapiV1Schema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": { \"type\": \"integer\" },\r",
									"      \"name\": { \"type\": \"string\" },\r",
									"      \"description\": { \"type\": \"string\" },\r",
									"      \"price\": { \"type\": \"number\" },\r",
									"      \"category\": { \"type\": \"string\" },\r",
									"      \"tags\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"type\": \"string\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"description\", \"price\", \"category\", \"tags\"]\r",
									"  },\r",
									"  \"fakerestapiV1ResponseSchema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"success\": { \"type\": \"boolean\" },\r",
									"      \"data\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"$ref\": \"#/fakerestapiV1Schema\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"success\", \"data\"]\r",
									"  }\r",
									"}\r",
									"pm.test(\"Response data structure is correct\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/Authors",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"Authors"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/Authors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"id\", responseJSON.id);\r",
									"pm.environment.set(\"id_book\", responseJSON.idBook);\r",
									"\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const schema =\r",
									"{\r",
									"  \"fakerestapiV1Schema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": { \"type\": \"integer\" },\r",
									"      \"name\": { \"type\": \"string\" },\r",
									"      \"description\": { \"type\": \"string\" },\r",
									"      \"price\": { \"type\": \"number\" },\r",
									"      \"category\": { \"type\": \"string\" },\r",
									"      \"tags\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"type\": \"string\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"description\", \"price\", \"category\", \"tags\"]\r",
									"  },\r",
									"  \"fakerestapiV1ResponseSchema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"success\": { \"type\": \"boolean\" },\r",
									"      \"data\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"$ref\": \"#/fakerestapiV1Schema\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"success\", \"data\"]\r",
									"  }\r",
									"}\r",
									"pm.test(\"Response data structure is correct\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 2,\r\n  \"idBook\": 1,\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/Authors",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"Authors"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/Authors/authors/books/{idBook}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const schema =\r",
									"{\r",
									"  \"fakerestapiV1Schema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": { \"type\": \"integer\" },\r",
									"      \"name\": { \"type\": \"string\" },\r",
									"      \"description\": { \"type\": \"string\" },\r",
									"      \"price\": { \"type\": \"number\" },\r",
									"      \"category\": { \"type\": \"string\" },\r",
									"      \"tags\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"type\": \"string\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"description\", \"price\", \"category\", \"tags\"]\r",
									"  },\r",
									"  \"fakerestapiV1ResponseSchema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"success\": { \"type\": \"boolean\" },\r",
									"      \"data\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"$ref\": \"#/fakerestapiV1Schema\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"success\", \"data\"]\r",
									"  }\r",
									"}\r",
									"pm.test(\"Response data structure is correct\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/Authors/authors/books/{{id_book}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"Authors",
								"authors",
								"books",
								"{{id_book}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/Authors/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const schema =\r",
									"{\r",
									"  \"fakerestapiV1Schema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": { \"type\": \"integer\" },\r",
									"      \"name\": { \"type\": \"string\" },\r",
									"      \"description\": { \"type\": \"string\" },\r",
									"      \"price\": { \"type\": \"number\" },\r",
									"      \"category\": { \"type\": \"string\" },\r",
									"      \"tags\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"type\": \"string\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"description\", \"price\", \"category\", \"tags\"]\r",
									"  },\r",
									"  \"fakerestapiV1ResponseSchema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"success\": { \"type\": \"boolean\" },\r",
									"      \"data\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"$ref\": \"#/fakerestapiV1Schema\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"success\", \"data\"]\r",
									"  }\r",
									"}\r",
									"pm.test(\"Response data structure is correct\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/Authors/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"Authors",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/Authors/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const schema =\r",
									"{\r",
									"  \"fakerestapiV1Schema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": { \"type\": \"integer\" },\r",
									"      \"name\": { \"type\": \"string\" },\r",
									"      \"description\": { \"type\": \"string\" },\r",
									"      \"price\": { \"type\": \"number\" },\r",
									"      \"category\": { \"type\": \"string\" },\r",
									"      \"tags\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"type\": \"string\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"description\", \"price\", \"category\", \"tags\"]\r",
									"  },\r",
									"  \"fakerestapiV1ResponseSchema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"success\": { \"type\": \"boolean\" },\r",
									"      \"data\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"$ref\": \"#/fakerestapiV1Schema\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"success\", \"data\"]\r",
									"  }\r",
									"}\r",
									"pm.test(\"Response data structure is correct\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{id}},\r\n  \"idBook\": {{id_book}},\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/Authors/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"Authors",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/Activities/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/Activities/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"Activities",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Books",
			"item": [
				{
					"name": "/api/v1/Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const schema =\r",
									"{\r",
									"  \"fakerestapiV1Schema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": { \"type\": \"integer\" },\r",
									"      \"name\": { \"type\": \"string\" },\r",
									"      \"description\": { \"type\": \"string\" },\r",
									"      \"price\": { \"type\": \"number\" },\r",
									"      \"category\": { \"type\": \"string\" },\r",
									"      \"tags\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"type\": \"string\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"description\", \"price\", \"category\", \"tags\"]\r",
									"  },\r",
									"  \"fakerestapiV1ResponseSchema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"success\": { \"type\": \"boolean\" },\r",
									"      \"data\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"$ref\": \"#/fakerestapiV1Schema\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"success\", \"data\"]\r",
									"  }\r",
									"}\r",
									"pm.test(\"Response data structure is correct\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/Books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"Books"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/Books/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"id_book\", responseJSON.id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const schema =\r",
									"{\r",
									"  \"fakerestapiV1Schema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": { \"type\": \"integer\" },\r",
									"      \"name\": { \"type\": \"string\" },\r",
									"      \"description\": { \"type\": \"string\" },\r",
									"      \"price\": { \"type\": \"number\" },\r",
									"      \"category\": { \"type\": \"string\" },\r",
									"      \"tags\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"type\": \"string\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"description\", \"price\", \"category\", \"tags\"]\r",
									"  },\r",
									"  \"fakerestapiV1ResponseSchema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"success\": { \"type\": \"boolean\" },\r",
									"      \"data\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"$ref\": \"#/fakerestapiV1Schema\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"success\", \"data\"]\r",
									"  }\r",
									"}\r",
									"pm.test(\"Response data structure is correct\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{id}}\",\r\n  \"title\": \"Anime\",\r\n  \"description\": \"Perjalanan Naruto\",\r\n  \"pageCount\": \"150\",\r\n  \"excerpt\": \"Konoha\",\r\n  \"publishDate\": \"{{$isoTimestamp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/Books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"Books"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/Books/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const schema =\r",
									"{\r",
									"  \"fakerestapiV1Schema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": { \"type\": \"integer\" },\r",
									"      \"name\": { \"type\": \"string\" },\r",
									"      \"description\": { \"type\": \"string\" },\r",
									"      \"price\": { \"type\": \"number\" },\r",
									"      \"category\": { \"type\": \"string\" },\r",
									"      \"tags\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"type\": \"string\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"description\", \"price\", \"category\", \"tags\"]\r",
									"  },\r",
									"  \"fakerestapiV1ResponseSchema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"success\": { \"type\": \"boolean\" },\r",
									"      \"data\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"$ref\": \"#/fakerestapiV1Schema\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"success\", \"data\"]\r",
									"  }\r",
									"}\r",
									"pm.test(\"Response data structure is correct\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/Books/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"Books",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/Books/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"title\", responseJSON.title);\r",
									"\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const schema =\r",
									"{\r",
									"  \"fakerestapiV1Schema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": { \"type\": \"integer\" },\r",
									"      \"name\": { \"type\": \"string\" },\r",
									"      \"description\": { \"type\": \"string\" },\r",
									"      \"price\": { \"type\": \"number\" },\r",
									"      \"category\": { \"type\": \"string\" },\r",
									"      \"tags\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"type\": \"string\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"description\", \"price\", \"category\", \"tags\"]\r",
									"  },\r",
									"  \"fakerestapiV1ResponseSchema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"success\": { \"type\": \"boolean\" },\r",
									"      \"data\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"$ref\": \"#/fakerestapiV1Schema\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"success\", \"data\"]\r",
									"  }\r",
									"}\r",
									"pm.test(\"Response data structure is correct\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{id}}\",\r\n  \"title\": \"Naruto\",\r\n  \"description\": \"Memimpin Konoha\",\r\n  \"pageCount\": 1000,\r\n  \"excerpt\": \"Konoha\",\r\n  \"publishDate\": \"{{$isoTimestamp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/Books/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"Books",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/Books/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/Books/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"Books",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cover Photos",
			"item": [
				{
					"name": "/api/v1/CoverPhotos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const schema =\r",
									"{\r",
									"  \"fakerestapiV1Schema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": { \"type\": \"integer\" },\r",
									"      \"name\": { \"type\": \"string\" },\r",
									"      \"description\": { \"type\": \"string\" },\r",
									"      \"price\": { \"type\": \"number\" },\r",
									"      \"category\": { \"type\": \"string\" },\r",
									"      \"tags\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"type\": \"string\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"description\", \"price\", \"category\", \"tags\"]\r",
									"  },\r",
									"  \"fakerestapiV1ResponseSchema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"success\": { \"type\": \"boolean\" },\r",
									"      \"data\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"$ref\": \"#/fakerestapiV1Schema\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"success\", \"data\"]\r",
									"  }\r",
									"}\r",
									"pm.test(\"Response data structure is correct\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/CoverPhotos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"CoverPhotos"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/CoverPhotos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const schema =\r",
									"{\r",
									"  \"fakerestapiV1Schema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": { \"type\": \"integer\" },\r",
									"      \"name\": { \"type\": \"string\" },\r",
									"      \"description\": { \"type\": \"string\" },\r",
									"      \"price\": { \"type\": \"number\" },\r",
									"      \"category\": { \"type\": \"string\" },\r",
									"      \"tags\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"type\": \"string\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"description\", \"price\", \"category\", \"tags\"]\r",
									"  },\r",
									"  \"fakerestapiV1ResponseSchema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"success\": { \"type\": \"boolean\" },\r",
									"      \"data\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"$ref\": \"#/fakerestapiV1Schema\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"success\", \"data\"]\r",
									"  }\r",
									"}\r",
									"pm.test(\"Response data structure is correct\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{id}}\",\r\n  \"idBook\": \"{{id_book}}\",\r\n  \"url\": \"{{$randomUrl}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/CoverPhotos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"CoverPhotos"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/CoverPhotos/books/covers/{idBook}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const schema =\r",
									"{\r",
									"  \"fakerestapiV1Schema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": { \"type\": \"integer\" },\r",
									"      \"name\": { \"type\": \"string\" },\r",
									"      \"description\": { \"type\": \"string\" },\r",
									"      \"price\": { \"type\": \"number\" },\r",
									"      \"category\": { \"type\": \"string\" },\r",
									"      \"tags\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"type\": \"string\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"description\", \"price\", \"category\", \"tags\"]\r",
									"  },\r",
									"  \"fakerestapiV1ResponseSchema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"success\": { \"type\": \"boolean\" },\r",
									"      \"data\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"$ref\": \"#/fakerestapiV1Schema\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"success\", \"data\"]\r",
									"  }\r",
									"}\r",
									"pm.test(\"Response data structure is correct\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/CoverPhotos/books/covers/{{id_book}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"CoverPhotos",
								"books",
								"covers",
								"{{id_book}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/CoverPhotos/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const schema =\r",
									"{\r",
									"  \"fakerestapiV1Schema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": { \"type\": \"integer\" },\r",
									"      \"name\": { \"type\": \"string\" },\r",
									"      \"description\": { \"type\": \"string\" },\r",
									"      \"price\": { \"type\": \"number\" },\r",
									"      \"category\": { \"type\": \"string\" },\r",
									"      \"tags\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"type\": \"string\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"description\", \"price\", \"category\", \"tags\"]\r",
									"  },\r",
									"  \"fakerestapiV1ResponseSchema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"success\": { \"type\": \"boolean\" },\r",
									"      \"data\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"$ref\": \"#/fakerestapiV1Schema\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"success\", \"data\"]\r",
									"  }\r",
									"}\r",
									"pm.test(\"Response data structure is correct\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/CoverPhotos/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"CoverPhotos",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/CoverPhotos/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const schema =\r",
									"{\r",
									"  \"fakerestapiV1Schema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": { \"type\": \"integer\" },\r",
									"      \"name\": { \"type\": \"string\" },\r",
									"      \"description\": { \"type\": \"string\" },\r",
									"      \"price\": { \"type\": \"number\" },\r",
									"      \"category\": { \"type\": \"string\" },\r",
									"      \"tags\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"type\": \"string\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"description\", \"price\", \"category\", \"tags\"]\r",
									"  },\r",
									"  \"fakerestapiV1ResponseSchema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"success\": { \"type\": \"boolean\" },\r",
									"      \"data\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"$ref\": \"#/fakerestapiV1Schema\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"success\", \"data\"]\r",
									"  }\r",
									"}\r",
									"pm.test(\"Response data structure is correct\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{id}}\",\r\n  \"idBook\": {{id_book}},\r\n  \"url\": \"{{$randomUrl}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/CoverPhotos/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"CoverPhotos",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/CoverPhotos/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/CoverPhotos/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"CoverPhotos",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "/api/v1/Users/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const schema =\r",
									"{\r",
									"  \"fakerestapiV1Schema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": { \"type\": \"integer\" },\r",
									"      \"name\": { \"type\": \"string\" },\r",
									"      \"description\": { \"type\": \"string\" },\r",
									"      \"price\": { \"type\": \"number\" },\r",
									"      \"category\": { \"type\": \"string\" },\r",
									"      \"tags\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"type\": \"string\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"description\", \"price\", \"category\", \"tags\"]\r",
									"  },\r",
									"  \"fakerestapiV1ResponseSchema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"success\": { \"type\": \"boolean\" },\r",
									"      \"data\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"$ref\": \"#/fakerestapiV1Schema\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"success\", \"data\"]\r",
									"  }\r",
									"}\r",
									"pm.test(\"Response data structure is correct\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/Users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"Users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/Users/ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"user_name\", responseJSON.userName);\r",
									"pm.environment.set(\"user_id\", responseJSON.id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const schema =\r",
									"{\r",
									"  \"fakerestapiV1Schema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": { \"type\": \"integer\" },\r",
									"      \"name\": { \"type\": \"string\" },\r",
									"      \"description\": { \"type\": \"string\" },\r",
									"      \"price\": { \"type\": \"number\" },\r",
									"      \"category\": { \"type\": \"string\" },\r",
									"      \"tags\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"type\": \"string\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"description\", \"price\", \"category\", \"tags\"]\r",
									"  },\r",
									"  \"fakerestapiV1ResponseSchema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"success\": { \"type\": \"boolean\" },\r",
									"      \"data\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"$ref\": \"#/fakerestapiV1Schema\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"success\", \"data\"]\r",
									"  }\r",
									"}\r",
									"pm.test(\"Response data structure is correct\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{id}}\",\r\n  \"userName\": \"{{$randomUserName}}\",\r\n  \"password\": \"{{$randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/Users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"Users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/Users/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const schema =\r",
									"{\r",
									"  \"fakerestapiV1Schema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": { \"type\": \"integer\" },\r",
									"      \"name\": { \"type\": \"string\" },\r",
									"      \"description\": { \"type\": \"string\" },\r",
									"      \"price\": { \"type\": \"number\" },\r",
									"      \"category\": { \"type\": \"string\" },\r",
									"      \"tags\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"type\": \"string\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"description\", \"price\", \"category\", \"tags\"]\r",
									"  },\r",
									"  \"fakerestapiV1ResponseSchema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"success\": { \"type\": \"boolean\" },\r",
									"      \"data\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"$ref\": \"#/fakerestapiV1Schema\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"success\", \"data\"]\r",
									"  }\r",
									"}\r",
									"pm.test(\"Response data structure is correct\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/Users/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"Users",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/Users/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const schema =\r",
									"{\r",
									"  \"fakerestapiV1Schema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": { \"type\": \"integer\" },\r",
									"      \"name\": { \"type\": \"string\" },\r",
									"      \"description\": { \"type\": \"string\" },\r",
									"      \"price\": { \"type\": \"number\" },\r",
									"      \"category\": { \"type\": \"string\" },\r",
									"      \"tags\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"type\": \"string\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"description\", \"price\", \"category\", \"tags\"]\r",
									"  },\r",
									"  \"fakerestapiV1ResponseSchema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"success\": { \"type\": \"boolean\" },\r",
									"      \"data\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"$ref\": \"#/fakerestapiV1Schema\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"success\", \"data\"]\r",
									"  }\r",
									"}\r",
									"pm.test(\"Response data structure is correct\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{id}}\",\r\n  \"userName\": \"{{user_name}}\",\r\n  \"password\": \"gQ7C7IdRZVxbmLH\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/Users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"Users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/Users/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/Users/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"Users",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Activitities",
			"item": [
				{
					"name": "/api/v1/Activities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const schema =\r",
									"{\r",
									"  \"fakerestapiV1Schema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": { \"type\": \"integer\" },\r",
									"      \"name\": { \"type\": \"string\" },\r",
									"      \"description\": { \"type\": \"string\" },\r",
									"      \"price\": { \"type\": \"number\" },\r",
									"      \"category\": { \"type\": \"string\" },\r",
									"      \"tags\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"type\": \"string\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"description\", \"price\", \"category\", \"tags\"]\r",
									"  },\r",
									"  \"fakerestapiV1ResponseSchema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"success\": { \"type\": \"boolean\" },\r",
									"      \"data\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"$ref\": \"#/fakerestapiV1Schema\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"success\", \"data\"]\r",
									"  }\r",
									"}\r",
									"pm.test(\"Response data structure is correct\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/Activities",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"Activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/Activities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const schema =\r",
									"{\r",
									"  \"fakerestapiV1Schema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": { \"type\": \"integer\" },\r",
									"      \"name\": { \"type\": \"string\" },\r",
									"      \"description\": { \"type\": \"string\" },\r",
									"      \"price\": { \"type\": \"number\" },\r",
									"      \"category\": { \"type\": \"string\" },\r",
									"      \"tags\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"type\": \"string\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"description\", \"price\", \"category\", \"tags\"]\r",
									"  },\r",
									"  \"fakerestapiV1ResponseSchema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"success\": { \"type\": \"boolean\" },\r",
									"      \"data\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"$ref\": \"#/fakerestapiV1Schema\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"success\", \"data\"]\r",
									"  }\r",
									"}\r",
									"pm.test(\"Response data structure is correct\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{id}}\",\r\n  \"title\": \"{{title}}\",\r\n  \"dueDate\": \"{{$isoTimestamp}}\",\r\n  \"completed\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/Activities",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"Activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/Activities/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const schema =\r",
									"{\r",
									"  \"fakerestapiV1Schema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": { \"type\": \"integer\" },\r",
									"      \"name\": { \"type\": \"string\" },\r",
									"      \"description\": { \"type\": \"string\" },\r",
									"      \"price\": { \"type\": \"number\" },\r",
									"      \"category\": { \"type\": \"string\" },\r",
									"      \"tags\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"type\": \"string\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"description\", \"price\", \"category\", \"tags\"]\r",
									"  },\r",
									"  \"fakerestapiV1ResponseSchema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"success\": { \"type\": \"boolean\" },\r",
									"      \"data\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"$ref\": \"#/fakerestapiV1Schema\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"success\", \"data\"]\r",
									"  }\r",
									"}\r",
									"pm.test(\"Response data structure is correct\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/Activities/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"Activities",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/Activities/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const schema =\r",
									"{\r",
									"  \"fakerestapiV1Schema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": { \"type\": \"integer\" },\r",
									"      \"name\": { \"type\": \"string\" },\r",
									"      \"description\": { \"type\": \"string\" },\r",
									"      \"price\": { \"type\": \"number\" },\r",
									"      \"category\": { \"type\": \"string\" },\r",
									"      \"tags\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"type\": \"string\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"description\", \"price\", \"category\", \"tags\"]\r",
									"  },\r",
									"  \"fakerestapiV1ResponseSchema\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"success\": { \"type\": \"boolean\" },\r",
									"      \"data\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": { \"$ref\": \"#/fakerestapiV1Schema\" }\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"success\", \"data\"]\r",
									"  }\r",
									"}\r",
									"pm.test(\"Response data structure is correct\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{id}}\",\r\n  \"title\": \"{{title}}\",\r\n  \"dueDate\": \"{{$isoTimestamp}}\",\r\n  \"completed\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/Activities/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"Activities",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/v1/Activities/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/Activities/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"Activities",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}